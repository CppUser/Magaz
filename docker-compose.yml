
services:

  kafka-gen:
   image: confluentinc/cp-kafka:latest
   hostname: kafka-gen
   container_name: kafka-gen
   volumes:
     - ./scripts/create_cluster_id.sh:/tmp/create_cluster_id.sh
     - ./clusterID:/tmp/clusterID
   command: "bash -c '/tmp/create_cluster_id.sh'"

  kafka:
    restart: always
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSITION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSITION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: BROKER://kafka:19092,EXTERNAL://kafka:39092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka:19092,EXTERNAL://kafka:39092
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,BROKER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_PROCESS_ROLES: 'controller,brokers'
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 1200000
      KAFKA_METADATA_LOG_MAX_RECORD_BYTES_BETWEEN_SNAPSHOTS: 2800
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: '1Y3ZLmcbT5G9rjbZpfPVqg'
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./scripts/update_run.sh:/tmp/update_run.sh
      - ./clusterID:/tmp/clusterID
    ports:
      - "39092:39092"
      - "29095:9093"
    networks:
      - magaz_network
#    healthcheck:
#      test: [ "CMD", "kafka-brokers-api-versions.sh", "--bootstrap-server", "localhost:9093" ]
#      interval: 10s
#      timeout: 5s
#      retries: 10

  user_service:
    build:
      context: .
      dockerfile: ./services/shop/user/cmd/api/Dockerfile
    container_name: user_service
    ports:
      - "8000:8081"
    depends_on:
      user_db:
        condition: service_healthy
#      kafka:
#        condition: service_healthy
    networks:
      - magaz_network
    volumes:
      - ./services/shop/user/config:/app/config

  user_db:
    image: postgres:16-alpine
    container_name: user_db
    environment:
      POSTGRES_USER: gans
      POSTGRES_PASSWORD: Steelfree
      POSTGRES_DB: user
    ports:
      - "5433:5432"
    volumes:
      - ./services/shop/user/storage/postgres:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U gans -d user -h localhost -p 5432" ]
      interval: 1s
      retries: 100
    networks:
      - magaz_network

  tg_redis:
    image: redis:latest
    container_name: tg_redis
    environment:
      REDIS_HOST: localhost
      REDIS_PORT: 6379
    ports:
      - "6379:6379"
    volumes:
      - ./services/bots/telegram/v2/storage/redis:/data  # Bind mount for Redis data storage
    restart: always
    networks:
      - magaz_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


  tg:
    build:
      context: .
      dockerfile: ./services/bots/telegram/v2/cmd/Dockerfile
    container_name: tg
    ports:
      - "8080:8080"
    depends_on:
        tg_redis:
          condition: service_healthy
#        kafka:
#          condition: service_healthy
    networks:
      - magaz_network
    volumes:
      - ./services/bots/telegram/v2/config:/app/config

volumes:
  kafka-data:


networks:
  magaz_network:
    driver: bridge

